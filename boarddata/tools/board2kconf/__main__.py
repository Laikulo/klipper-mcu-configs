import logging
from datetime import datetime
from pathlib import Path

from .kconfig import KConfig
from .model import BoardDefinition

logger = logging.getLogger("klipper-mcu-configs")

def main():
    logging.basicConfig(level=logging.INFO)
    logging.warning("THIS IS WIP TOOLING, IT MAY EAT YOUR CAT. BE WARNED.")
    board_defs = BoardDefinition.get_all_from_file(
        Path(__file__).parent.parent.parent / 'board' / 'v1' / 'example.json',
    )

    kc = KConfig(
        (Path(__file__).parent.parent.parent / 'test_resources' / 'kconfig' )
    )

    my_board = [ d for d in board_defs if d.manufacturer == "BTT" and d.model == "Octopus" and d.variant == "Octopus-F446"][0]

    kc.symbol(prompt="Enable extra low-level configuration options").set(True)
    kc.choice(prompt="Micro-controller Architecture").select(prompt=my_board.mcu.arch)
    kc.choice(prompt="Processor model").select(prompt=my_board.mcu.mcu)
    kc.choice(prompt="Clock Reference").select("STM32_CLOCK_REF_12M")

    fancy_header_lines = [
        "",
        "This file was generated by TBDNAMEHERE.",
        f"This config is for: {my_board.manufacturer}/{my_board.model}/{my_board.variant}",
        f"This config was generated at {datetime.now(None).isoformat()}",
        "THIS IS WIP SOFTWARE, AND IT MAY EAT YOUR CAT. BE CAREFUL. TRUST (or not) BUT VERIFY",
        "",
        ""
    ]

    kconfig_header = "\n".join([f"# {x}" for x in fancy_header_lines])
    kc.kcl.write_config("./test.config", header=kconfig_header, save_old=False)

#    code.interact(local=locals())



if __name__ == '__main__':
    main()